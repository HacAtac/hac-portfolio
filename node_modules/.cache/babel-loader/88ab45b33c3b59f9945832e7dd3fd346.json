{"ast":null,"code":"const merge = require(\"webpack-merge\");\n\nconst {\n  isFunction\n} = require(\"../../utils\");\n\nconst {\n  log\n} = require(\"../../logger\");\n\nconst {\n  applyDevServerConfigPlugins\n} = require(\"../plugins\");\n\nconst {\n  loadDevServerConfigProvider\n} = require(\"../../cra\");\n\nfunction createProxy(cracoConfig, craDevServerConfigProvider, context) {\n  const proxy = (proxy, allowedHost) => {\n    let devServerConfig = craDevServerConfigProvider(proxy, allowedHost);\n\n    if (isFunction(cracoConfig.devServer)) {\n      devServerConfig = cracoConfig.devServer(devServerConfig, { ...context,\n        proxy,\n        allowedHost\n      });\n\n      if (!devServerConfig) {\n        throw new Error(\"craco: 'devServer' function didn't return a config object.\");\n      }\n    } else {\n      // TODO: ensure is otherwise a plain object, if not, log an error.\n      devServerConfig = merge(devServerConfig, cracoConfig.devServer || {});\n    }\n\n    devServerConfig = applyDevServerConfigPlugins(cracoConfig, devServerConfig, { ...context,\n      proxy,\n      allowedHost\n    });\n    log(\"Merged DevServer config.\");\n    return devServerConfig;\n  };\n\n  return proxy;\n}\n\nfunction createConfigProviderProxy(cracoConfig, context) {\n  const craDevServerConfigProvider = loadDevServerConfigProvider(cracoConfig);\n  const proxy = createProxy(cracoConfig, craDevServerConfigProvider, context);\n  return proxy;\n}\n\nmodule.exports = {\n  createConfigProviderProxy\n};","map":{"version":3,"sources":["C:/Users/Dell/Desktop/projects/hac-portfolio/node_modules/@craco/craco/lib/features/dev-server/create-config-provider-proxy.js"],"names":["merge","require","isFunction","log","applyDevServerConfigPlugins","loadDevServerConfigProvider","createProxy","cracoConfig","craDevServerConfigProvider","context","proxy","allowedHost","devServerConfig","devServer","Error","createConfigProviderProxy","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,eAAD,CAArB;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAiBD,OAAO,CAAC,aAAD,CAA9B;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAUF,OAAO,CAAC,cAAD,CAAvB;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAkCH,OAAO,CAAC,YAAD,CAA/C;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAkCJ,OAAO,CAAC,WAAD,CAA/C;;AAEA,SAASK,WAAT,CAAqBC,WAArB,EAAkCC,0BAAlC,EAA8DC,OAA9D,EAAuE;AACnE,QAAMC,KAAK,GAAG,CAACA,KAAD,EAAQC,WAAR,KAAwB;AAClC,QAAIC,eAAe,GAAGJ,0BAA0B,CAACE,KAAD,EAAQC,WAAR,CAAhD;;AAEA,QAAIT,UAAU,CAACK,WAAW,CAACM,SAAb,CAAd,EAAuC;AACnCD,MAAAA,eAAe,GAAGL,WAAW,CAACM,SAAZ,CAAsBD,eAAtB,EAAuC,EACrD,GAAGH,OADkD;AAErDC,QAAAA,KAFqD;AAGrDC,QAAAA;AAHqD,OAAvC,CAAlB;;AAMA,UAAI,CAACC,eAAL,EAAsB;AAClB,cAAM,IAAIE,KAAJ,CAAU,4DAAV,CAAN;AACH;AACJ,KAVD,MAUO;AACH;AACAF,MAAAA,eAAe,GAAGZ,KAAK,CAACY,eAAD,EAAkBL,WAAW,CAACM,SAAZ,IAAyB,EAA3C,CAAvB;AACH;;AAEDD,IAAAA,eAAe,GAAGR,2BAA2B,CAACG,WAAD,EAAcK,eAAd,EAA+B,EACxE,GAAGH,OADqE;AAExEC,MAAAA,KAFwE;AAGxEC,MAAAA;AAHwE,KAA/B,CAA7C;AAMAR,IAAAA,GAAG,CAAC,0BAAD,CAAH;AAEA,WAAOS,eAAP;AACH,GA3BD;;AA6BA,SAAOF,KAAP;AACH;;AAED,SAASK,yBAAT,CAAmCR,WAAnC,EAAgDE,OAAhD,EAAyD;AACrD,QAAMD,0BAA0B,GAAGH,2BAA2B,CAACE,WAAD,CAA9D;AACA,QAAMG,KAAK,GAAGJ,WAAW,CAACC,WAAD,EAAcC,0BAAd,EAA0CC,OAA1C,CAAzB;AAEA,SAAOC,KAAP;AACH;;AAEDM,MAAM,CAACC,OAAP,GAAiB;AACbF,EAAAA;AADa,CAAjB","sourcesContent":["const merge = require(\"webpack-merge\");\n\nconst { isFunction } = require(\"../../utils\");\nconst { log } = require(\"../../logger\");\nconst { applyDevServerConfigPlugins } = require(\"../plugins\");\nconst { loadDevServerConfigProvider } = require(\"../../cra\");\n\nfunction createProxy(cracoConfig, craDevServerConfigProvider, context) {\n    const proxy = (proxy, allowedHost) => {\n        let devServerConfig = craDevServerConfigProvider(proxy, allowedHost);\n\n        if (isFunction(cracoConfig.devServer)) {\n            devServerConfig = cracoConfig.devServer(devServerConfig, {\n                ...context,\n                proxy,\n                allowedHost\n            });\n\n            if (!devServerConfig) {\n                throw new Error(\"craco: 'devServer' function didn't return a config object.\");\n            }\n        } else {\n            // TODO: ensure is otherwise a plain object, if not, log an error.\n            devServerConfig = merge(devServerConfig, cracoConfig.devServer || {});\n        }\n\n        devServerConfig = applyDevServerConfigPlugins(cracoConfig, devServerConfig, {\n            ...context,\n            proxy,\n            allowedHost\n        });\n\n        log(\"Merged DevServer config.\");\n\n        return devServerConfig;\n    };\n\n    return proxy;\n}\n\nfunction createConfigProviderProxy(cracoConfig, context) {\n    const craDevServerConfigProvider = loadDevServerConfigProvider(cracoConfig);\n    const proxy = createProxy(cracoConfig, craDevServerConfigProvider, context);\n\n    return proxy;\n}\n\nmodule.exports = {\n    createConfigProviderProxy\n};\n"]},"metadata":{},"sourceType":"script"}